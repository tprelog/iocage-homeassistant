#!/bin/sh
#
# PROVIDE: appdaemon
# REQUIRE: LOGIN
# KEYWORD: shutdown
#
# appdaemon_enable: Set to YES to enable the appdaemon service.
#       Default: NO
#
# appdaemon_user: The user account used to run the appdaemon daemon.
#       This is optional, however do not specifically set this to an
#       empty string as this will cause the daemon to run as root.
#       Default:  "appdaemon"
#       Set to retro:    `sysrc appdaemon_user="hass"`
#       Reset to default: `sysrc -x appdaemon_user`
#
# appdaemon_group: The group account used to run the appdaemon daemon.
#       Default:  $PRIMARY_USER_GROUP
#       Set to retro:    `sysrc appdaemon_group="hass"`
#       Reset to default: `sysrc -x appdaemon_group`
#
# appdaemon_user_dir: Directory where the appdaemon user's files can be located.
#       Default1: $HOME
#       Default2: ${appdaemon_config_dir}     (If $HOME is not set)
#       Set to retro:    `sysrc appdaemon_user_dir="/home/hass"`
#       Reset to default: `sysrc -x appdaemon_user_dir`
#
# appdaemon_config_dir: Directory where the appdaemon configuration is located.
#       Default1: "$HOME/.appdaemon"
#       Default2: "/usr/local/etc/appdaemon"  (If $HOME is not set)
#       Set to retro:    `sysrc appdaemon_config_dir="/home/hass/appdaemon"`
#       Reset to default: `sysrc -x appdaemon_config_dir`
#
# appdaemon_python: Set the version of Python for Home Assistant Core.
#       Default:  "/usr/local/bin/python3.8"
#       Set to retro:    `sysrc appdaemon_python="/usr/local/bin/python3.7"`
#       Reset to default: `sysrc -x appdaemon_python`
#
# appdaemon_venv: Directory where the appdaemon virtualenv is located.
#       Default:  "/usr/local/share/appdaemon"
#       Set to retro:    `sysrc appdaemon_venv="/srv/appdaemon"`
#       Reset to default: `sysrc -x appdaemon_venv`

# -------------------------------------------------------
# Copy this file to '/usr/local/etc/rc.d/appdaemon' 
# `chmod +x /usr/local/etc/rc.d/appdaemon`
# `sysrc appdaemon_enable=yes`
# `service appdaemon start`
# -------------------------------------------------------

. /etc/rc.subr
name=appdaemon
rcvar=${name}_enable

load_rc_config ${name}

: ${appdaemon_enable:="NO"}
: ${appdaemon_python:="/usr/local/bin/python3.7"}
: ${appdaemon_rc_debug:="OFF"}
: ${appdaemon_rc_info:="OFF"}
: ${appdaemon_rc_umask:="022"}
: ${appdaemon_user:="appdaemon"}
: ${appdaemon_venv:="/usr/local/share/appdaemon"}

if [ ! "$(id ${appdaemon_user} 2>/dev/null)" ]; then
  err 1 "user not found: ${appdaemon_user}"
else
  HOME=$(eval echo "~${appdaemon_user}" 2>/dev/null)
  : ${appdaemon_group:="`id -gn ${appdaemon_user}`"}
fi

if [ -z "${HOME}" ] || [ "${HOME}" == "/nonexistent" ] || [ "${HOME}" == "/var/empty" ] || [ "${HOME}" == "none" ]; then
  : ${appdaemon_config_dir:="/usr/local/etc/${name}"}
  : ${appdaemon_user_dir:="${appdaemon_config_dir}"}
  export HOME="${appdaemon_user_dir}"
else
  : ${appdaemon_user_dir:="${HOME}"}
  : ${appdaemon_config_dir:="${appdaemon_user_dir}/${name}"}
fi

export PATH=${PATH}:/usr/local/sbin:/usr/local/bin:${appdaemon_venv}/bin
export TERM=xterm

checkyesno appdaemon_rc_info && rc_info=${appdaemon_rc_info}
checkyesno appdaemon_rc_debug && rc_debug=${appdaemon_rc_debug}

pidfile_child="/var/run/${name}.pid"
pidfile="/var/run/${name}_daemon.pid"
logfile="/var/log/${name}_daemon.log"

command="/usr/sbin/daemon"
extra_commands="install upgrade test"

start_precmd=${name}_prestart
appdaemon_prestart() {

  appdaemon_precmd || return 1
  install -g ${appdaemon_group} -o ${appdaemon_user} -- /dev/null "${logfile}" || return 1
  install -g ${appdaemon_group} -o ${appdaemon_user} -- /dev/null "${pidfile}" || return 1
  install -g ${appdaemon_group} -o ${appdaemon_user} -- /dev/null "${pidfile_child}" || return 1

  AD_ARGS=""
  AD_ARGS=" --config ${appdaemon_config_dir}"

  if [ ! -z "${appdaemon_debug_level}" ]; then
    AD_ARGS="${AD_ARGS} --debug ${appdaemon_debug_level}"
  fi

  rc_flags="-f -o ${logfile} -P ${pidfile} -p ${pidfile_child} ${AD} ${AD_ARGS}" ${rc_flags}
}

start_postcmd=${name}_poststart
appdaemon_poststart() {
  sleep 1
  run_rc_command status
}

stop_postcmd=${name}_postcmd
appdaemon_postcmd() {
  run_rc_command poll
  rm -f -- "${pidfile}"
  rm -f -- "${pidfile_child}"
}

status_postcmd=${name}_poststatus
appdaemon_poststatus() {
  echo "http://`ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'`:5050"
}

install_cmd="${name}_install ${@}"
appdaemon_install() {
  shift; local _arg_="${@:-"${name}"}"
  debug "install: ${_arg_}"
  run_rc_script /root/post_install.sh "${_arg_}"
  debug "install returned: ${?}"
}

restart_cmd="${name}_restart"
appdaemon_restart() {
  run_rc_command stop 2>/dev/null
  sleep 1
  run_rc_command start
}

upgrade_cmd="${name}_upgrade"
appdaemon_upgrade() {
  appdaemon_precmd || return 1
  run_rc_command stop 2>/dev/null; _rcstop_=$?
  su ${appdaemon_user} -c '
    source ${1}/bin/activate || exit 1
    pip install --upgrade appdaemon
    deactivate
  ' _ ${appdaemon_venv} || exit 1
  [ $? == 0 ] && [ ${_rcstop_} == 0 ] && run_rc_command start
}

test_cmd="${name}_test"
appdaemon_test() {
  echo -e "\nTesting virtualenv...\n"
  appdaemon_precmd || return 1
  ## Switch users / activate virtualenv / run a command
  su "${appdaemon_user}" -c '
    source ${1}/bin/activate || exit 2
    echo " $(python --version)" || exit 3
    echo " AppDaemon $(pip show appdaemon | grep Version | cut -d" " -f2)" || exit 4
    deactivate
  ' _ ${appdaemon_venv}
  [ $? != 0 ] && echo "exit $?"
}

appdaemon_precmd() {
  if [ ! -d "${appdaemon_venv}" ]; then
    echo -e "${appdaemon_venv} is not found"
  elif [ ! -x ${AD:="${appdaemon_venv}/bin/appdaemon"} ]; then
    echo -e "${AD} is not found or is not executable"; exit 1
  elif [ `stat -f '%Su' ${AD}` != ${appdaemon_user} ]; then
    echo -e " ${AD} is not owned by ${appdaemon_user}"; exit 1
    #chown -R "${appdaemon_user}":"${appdaemon_group}" "${appdaemon_venv}" \
  fi
}

run_rc_command "$1"
