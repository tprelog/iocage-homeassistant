#!/bin/sh
#
# PROVIDE: homeassistant
# REQUIRE: LOGIN
# KEYWORD: shutdown
#
# homeassistant_enable: Set to YES to enable the homeassistant service.
#       Default: NO
#
# homeassistant_user: The user account used to run the homeassistant daemon.
#       This is optional, however do not specifically set this to an
#       empty string as this will cause the daemon to run as root.
#       Default:  "homeassistant"
#       Set to retro:    `sysrc homeassistant_user="hass"`
#       Reset to default: `sysrc -x homeassistant_user`
#
# homeassistant_group: The group account used to run the homeassistant daemon.
#       Default:  $PRIMARY_USER_GROUP
#       Set to retro:    `sysrc homeassistant_group="hass"`
#       Reset to default: `sysrc -x homeassistant_group`
#
# homeassistant_user_dir: Directory where the homeassistant user's files can be located.
#       Default1:   $HOME
#       Default2:   ${homeassistant_config_dir}     (If $HOME is not set)
#       Set to retro:    `sysrc homeassistant_user_dir="/home/hass"`
#       Reset to default: `sysrc -x homeassistant_user_dir`
#
# homeassistant_config_dir: Directory where the homeassistant `configuration.yaml` is located.
#       Default1:   "$HOME/.homeassistant"
#       Default2:   "/usr/local/etc/homeassistant"  (If $HOME is not set)
#       Set to retro:    `sysrc homeassistant_config_dir="/home/hass/homeassistant"`
#       Reset to default: `sysrc -x homeassistant_config_dir`
#
# homeassistant_python: Set the version of Python for Home Assistant Core.
#       Default:  "/usr/local/bin/python3.8"
#       Set to retro:    `sysrc homeassistant_python="/usr/local/bin/python3.7"`
#       Reset to default: `sysrc -x homeassistant_python`
#
# homeassistant_venv: Directory where the homeassistant virtualenv is located.
#       Default:  "/usr/local/share/homeassistant"
#       Set to retro:    `sysrc homeassistant_venv="/srv/homeassistant"`
#       Reset to default: `sysrc -x homeassistant_venv`

# -------------------------------------------------------
# Copy this file to '/usr/local/etc/rc.d/homeassistant' 
# `chmod +x /usr/local/etc/rc.d/homeassistant`
# `sysrc -f /etc/rc.conf homeassistant_enable=yes`
# `service homeassistant install`
# `service homeassistant start`
# -------------------------------------------------------

. /etc/rc.subr
name=homeassistant
rcvar=${name}_enable

load_rc_config ${name}

: ${homeassistant_enable:="NO"}
: ${homeassistant_openssl:="base"}
: ${homeassistant_python:="/usr/local/bin/python3.8"}
: ${homeassistant_rc_chown:="OFF"}
: ${homeassistant_rc_debug:="OFF"}
: ${homeassistant_rc_info:="OFF"}
: ${homeassistant_rc_umask:="022"}
: ${homeassistant_user:="homeassistant"}
: ${homeassistant_venv:="/usr/local/share/homeassistant"}

if [ ! "$(id ${homeassistant_user} 2>/dev/null)" ]; then
  err 1 "user not found: ${homeassistant_user}"
else
  HOME=$(eval echo "~${homeassistant_user}" 2>/dev/null)
  : ${homeassistant_group:="`id -gn ${homeassistant_user}`"}
fi

if [ -z "${HOME}" ] || [ "${HOME}" == "/nonexistent" ] || [ "${HOME}" == "/var/empty" ] || [ "${HOME}" == "none" ]; then
  : ${homeassistant_config_dir:="/usr/local/etc/${name}"}
  : ${homeassistant_user_dir:="${homeassistant_config_dir}"}
  export HOME="${homeassistant_user_dir}"
else
  : ${homeassistant_user_dir:="${HOME}"}
  : ${homeassistant_config_dir:="${homeassistant_user_dir}/.${name}"}
  : ${homeassistant_backup_dir:="${homeassistant_user_dir}/.${name}_zip.d"}
fi

if [ "${homeassistant_openssl}" == "package" ]; then
  export CPATH=/usr/local/include
  export LIBRARY_PATH=/usr/lib:/usr/local/lib
fi
export PATH=/usr/local/sbin:/usr/local/bin:${PATH}
export TERM=xterm

checkyesno homeassistant_rc_debug && rc_debug="ON"
checkyesno homeassistant_rc_info && rc_info="ON"

logfile="/var/log/${name}_daemon.log"
pidfile="/var/run/${name}_daemon.pid"
pidfile_child="/var/run/${name}.pid"

command="/usr/sbin/daemon"
extra_commands="check_config config install reinstall logs test upgrade cli"

start_precmd=${name}_prestart
homeassistant_prestart() {
  
  homeassistant_precmd
  install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${logfile}" || return 1
  install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${pidfile}" || return 1
  install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${pidfile_child}" || return 1

  if [ ! -d "${homeassistant_config_dir}" ]; then
    install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${homeassistant_config_dir}" || return 1
  fi
  
  HA_ARGS="--config ${homeassistant_config_dir}"
  
  if [ ! -z "${homeassistant_log_file}" ]; then
    install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${homeassistant_log_file}" \
    || return 1
    HA_ARGS="${HA_ARGS} --log-file ${homeassistant_log_file}"
  fi
  
  if [ ! -z "${homeassistant_log_rotate_days}" ]; then
    HA_ARGS="${HA_ARGS} --log-rotate-days ${homeassistant_log_rotate_days}"
  fi
  
  rc_flags="-f -o ${logfile} -P ${pidfile} -p ${pidfile_child} ${HA_CMD} ${HA_ARGS}"
}

cli_cmd="${name}_cli ${@}"
homeassistant_cli() {
  shift; local _arg_="${@:-"--help"}" _cli_venv_
  # TODO use seperate venv for homeassistant-cli
  warn "this SHOULD - BUT currently DOES NOT create a seperate virtualenv"
  warn "experimental: use \`service homeassistant install homeassistant-cli\` to install"
  debug "args: ${_arg_}"
  _cli_venv_="${homeassistant_cli_vnev:="${homeassistant_venv}"}"
  su ${homeassistant_user} -c '
    source ${1}/bin/activate || exit 1
    shift
    hass-cli ${@}
    deactivate
  ' _ ${_cli_venv_} ${_arg_}
}

check_config_cmd="${name}_check_config"
homeassistant_check_config() {
  homeassistant_config config --check
}

ensure_config_cmd="${name}_ensure_config"
homeassistant_ensure_config() {
  homeassistant_config config --ensure
}

start_postcmd=${name}_poststart
homeassistant_poststart() {
  sleep 1
  run_rc_command status
}

stop_precmd=${name}_prestop
homeassistant_prestop() {
  local _owner_
  if [ "${_owner_:-"`stat -f '%Su' ${pidfile_child}`"}" != ${homeassistant_user} ]; then
    err 1 "${homeassistant_user} can not stop a process owned by ${_owner_}"
  fi
}

stop_postcmd=${name}_poststop
homeassistant_poststop() {
  rm -f -- "${pidfile_child}"
  rm -f -- "${pidfile}"
}

status_postcmd=${name}_poststatus
homeassistant_poststatus() {
  local _http_="http" _ip_ _port_
  : ${homeassistant_secure:="NO"}
  _ip_="$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')"
  _port_="${homeassistant_port:-"8123"}"
  if checkyesno homeassistant_secure; then
    _http_="https"
  fi
  echo "${_http_}://${_ip_}:${_port_}"
}

restart_precmd="${name}_prerestart"
homeassistant_prerestart() {
  homeassistant_prestop
  homeassistant_config config --check
}

rcvar_cmd=${name}_rcvar
homeassistant_rcvar() {
  sysrc -a | grep ${name}
}

upgrade_cmd="${name}_upgrade"
homeassistant_upgrade() {
  homeassistant_precmd
  run_rc_command stop 2>/dev/null; local _rcstop_=$?
  homeassistant_install --upgrade "${name}"
  homeassistant_config config --check && [ ${_rcstop_} == 0 ] && run_rc_command start
}

logs_cmd="${name}_logs $@"
homeassistant_logs() {
  local num=${3}
  case ${2} in
    -f )
      tail -F "${logfile}"
    ;;
    -h )
      head -n ${num:="50"} "${logfile}"
    ;;
    -n | -t )
      tail -n ${num:="25"} "${logfile}"
    ;;
    -l )
      less -R "${logfile}"
    ;;
    * )
      cat "${logfile}"
    ;;
  esac
}


config_cmd="${name}_config $@"
homeassistant_config() {
  usage() {
    echo -e "\n Config Directory: ${homeassistant_config_dir}"
    echo -e " Backup Directory: ${homeassistant_backup_dir}\n"
    cat <<-_HELP_ # NOTE this Here Doc uses TABS to function correctly
	  
	  Usage: Do stuff with the configuration
	    
	  export TODO = Add more useful information to help
	    
	    -b  | --backup   Create zip backup of a configuration directory.
	    -c  | --check    Run a config check.
	    -cp | --copy     Copy configuration to another directory.
	    -e  | --ensure   Create a default configuration.
	    -r  | --restore  Restore zip backup to a configuration directory.
	    
	_HELP_
    return 0
  }
  
  local dir="${3}"
    case $2 in
      -b | --backup )
          local conf_dir="${dir:=$homeassistant_config_dir}"
          if [ ! -d ${conf_dir} ]; then
            err 1 "directory not found: ${conf_dir}"
          elif [ ! -d ${homeassistant_backup_dir} ]; then
            install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${homeassistant_backup_dir}" || return 1
          fi
          su ${homeassistant_user} -c '
            _now=$(date +%y%m%d.%H%M%S)
            _ver=$(cat ${1}/.HA_VERSION 2>/dev/null)
            backup="HA_${_ver:="NA"}_${_now}.zip"
            echo -e "\n${orn}Creating Backup...\n${end}"
            echo    " Config Directory: ${1}"
            echo    " Backup Directory: ${2}"
            echo -e " Backup file: ${backup}\n"
            
            cd ${1}
            zip -9 -q -r "${2}/${backup}" . -x"*/components/*" -x"*/deps/*" -x"*/home-assistant.log" -x"*/.cache/*" -x"*/__pycache__*/" \
            && { echo -e "${orn}Testing Backup... ${end}"; unzip -t "${2}/${backup}" 2>&1>/dev/null; } \
            || { echo -e "${red}Backup Failed"${end}; rm -f -- "${2}/${backup}"; exit 1; }
            echo -e "${grn}Backup Created${end} ${2}/${backup}"
          ' _ ${conf_dir} ${homeassistant_backup_dir} || return $?
          ;;
          
      -c | --check )
          homeassistant_precmd
          local conf_dir="${dir:=$homeassistant_config_dir}"
          info "checking configuration: ${conf_dir}"
          su ${homeassistant_user} -c '
            source ${1}/bin/activate || exit 1
            hass --config ${2} --script check_config
            deactivate
          ' _ ${homeassistant_venv} ${conf_dir}
          ;;
          
      -cp | --copy )
          [ ! -z "${dir}" ] || err 1 "Please provide a /second/directory/path"
          local _from_ _to_
          ## One folder must be empty! Copy config to the empty folder.
          if [ ! -d "${dir}" ] || [ ! "$(ls -A ${dir})" ]; then
            _from_="${homeassistant_config_dir}"
            _to_="${dir}"
            install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${config_to}" || return 1
          elif [ ! -d "${homeassistant_config_dir}" ] || [ ! "$(ls -A ${homeassistant_config_dir})" ]; then
            _to_="${homeassistant_config_dir}"
            _from_="${dir}"
            install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${config_to}" || return 1
          else
            err 1 "${orn}Destination must be an empty directory${end}"
          fi
          su ${homeassistant_user} -c '
            cp -R ${1}/ ${2}/
          ' _ ${_from_} ${_to_}
          ;;
          
      -e | --ensure )
          homeassistant_precmd
          local conf_dir="${dir:=$homeassistant_config_dir}"
          su ${homeassistant_user} -c '
            source ${1}/bin/activate || exit 1
            hass --config ${2} --script ensure_config
            deactivate
          ' _ ${homeassistant_venv} ${conf_dir}
          ;;
          
      -h | --help )
          usage
          ;;
        
      -r | --restore )
          local _create_="false" conf_dir="${dir:=$homeassistant_config_dir}"
          if [ ! -d ${homeassistant_backup_dir} ] || [ ! "$(ls -A ${homeassistant_backup_dir} | grep .zip)" ]; then
            err 1 "no backups found: ${homeassistant_backup_dir}"
          elif [ -d ${conf_dir} ] && [ "$(ls -A ${conf_dir})" ]; then
            echo -e "${orn}\n Directory is not empty${end} ${conf_dir}"
            echo -e "${orn} This operation will REPLACE existing files${end}\n"
          elif [ ! -d ${conf_dir} ] || [ ! "$(ls -A ${conf_dir})" ];then
            install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${conf_dir}" \
            || err 1 "unable to create directory: ${conf_dir}"
            _create_="true"
            echo -e "${grn}\n Backup will be restored to ${conf_dir}${end}\n"
          fi
          su ${homeassistant_user} -c '
            cancel() {
              exit 99
            }; trap cancel 2 3 6
            backups="$(ls -r "${1}" | grep .zip)"
            PS3=$(echo -e "\n C to Cancel\n Select: ")
            select zip in ${backups}
              do
                if [ "$REPLY" == c ] || [ "$REPLY" == C ]; then
                  cancel
                elif [ -z "${zip}" ]; then
                  echo -e "${red} $REPLY ${end}is not a valid number"
                  continue
                fi
                unzip -o -d "${2}" "${1}/${zip}" \
                && echo -e "${grn} Configuration restored${end}\n"
                exit 0
              done
          ' _ ${homeassistant_backup_dir} ${conf_dir}
          if [ $? == "99" ] && [ "${_create_}" == "true" ]; then
            [ ! "$(ls -A ${conf_dir})" ] \
            && { echo "Cleaning up..."; rmdir "${conf_dir}"; }
          fi
          ;;
      * )
        usage
        ;;
    esac
}


install_cmd="${name}_install ${@}"
homeassistant_install() {
  shift; local _new_ _arg_="${@:-"${name}"}"
  debug "install: ${_arg_}"
  if [ -d "${homeassistant_venv}" ] && [ ! -z "$(ls -A ${homeassistant_venv})" ]; then
    info "found existing directory: ${homeassistant_venv}"
    homeassistant_precmd
  elif [ ! -d "${homeassistant_venv}" ] && [ "${_ck="$(echo ${1} | cut -d= -f1)"}" != "${name}" ]; then
    debug "name check: ${_ck}"
    err 1 "${name} is not installed: ${homeassistant_venv}"
  else
    info "creating virtualenv: ${homeassistant_venv}"
    install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- ${homeassistant_venv} 2>/tmp/err \
    && _new_="Y" || err ${?} "$(</tmp/err)"
  fi
  su ${homeassistant_user} -c '
    if [ ${1} == "Y" ]; then
      ${2} -m venv ${3}
      source ${3}/bin/activate 2>/tmp/err || exit 1
      shift 3
      pip install --upgrade pip wheel
      pip install ${@}
    else
      source ${3}/bin/activate 2>/tmp/err || exit 1
      shift 3
      pip install ${@}
    fi
    deactivate
  ' _ ${_new_:-"N"} ${homeassistant_python} ${homeassistant_venv} ${_arg_} || err ${?} "$(</tmp/err)"
}

reinstall_cmd="${name}_reinstall ${@}"
homeassistant_reinstall() {
  shift; local _ck_ _rcstop_ _srv_ _v_ _opt_="${@}"
  homeassistant_precmd
  if [ -z "${_srv_:="${_opt_}"}" ]; then
    if [ -z ${_v_:-`cat ${homeassistant_config_dir}/.HA_VERSION 2>/dev/null`} ] \
    || [ -z ${_v_:-`${homeassistant_venv}/bin/hass --version 2>/dev/null`} ]; then
      _srv_="${name}==${_v_}"
    else
      _srv_="${name}"
    fi
  fi
  if [ "${_ck_="$(echo ${_srv_} | cut -d= -f1)"}" != "${name}" ]; then
    warn "this will delete the venv for \"${name}\" but you are trying to reinstall ${_ck_}"
    warn "expecting \"${name}\" as ARG_1 -- you can try 'forcereinstall' if this is intentional"
    return 1
  fi
  debug "reinstall: ${_srv_}"
  run_rc_command stop 2>/dev/null; _rcstop_=$?
  [ -d ${HOME}/.cache/pip ] && rm -rf -- ${HOME}/.cache/pip
  [ -d "${homeassistant_venv}" ] && rm -rf -- "${homeassistant_venv}"
  run_rc_command install ${_srv_} && [ ${_rcstop_} == 0 ] && run_rc_command start
}

test_cmd="${name}_test $@"
homeassistant_test() {
  echo
  echo "USER: `whoami`"
  echo "HOME: ${HOME}"
  echo "PATH: ${PATH}"
  homeassistant_precmd
  echo -e "\nChecking Service\n"
  echo -e "  User: ${homeassistant_user}"
  echo -e " Group: ${homeassistant_group}\n"
  echo "Switching to user ${homeassistant_user}"
  ## Switch users / activate virtualenv / run a command
  su "${homeassistant_user}" -c '
    echo " USER: $(whoami)"
    echo " HOME: ${HOME}"
    echo " PATH: ${PATH}"
    echo
    echo " Using $(openssl version)"
    echo " CPATH = ${CPATH}"
    echo " LIBRARY_PATH = ${LIBRARY_PATH}"
    echo
    source ${1}/bin/activate || exit 20
    ## Check versions of python and homeassistant
    echo " $(python --version)" || exit 21
    echo " Home Assistant $(pip show homeassistant | grep Version | cut -d" " -f2)" || exit 22
    echo
    deactivate
  ' _ ${homeassistant_venv}
  debug "returned $?"
}

colors () {
  export red=$'\e[1;31m'
  export grn=$'\e[1;32m'
  export yel=$'\e[1;33m'
  export bl1=$'\e[1;34m'
  export mag=$'\e[1;35m'
  export cyn=$'\e[1;36m'
  export blu=$'\e[38;5;39m'
  export orn=$'\e[38;5;208m'
  export end=$'\e[0m'
}

homeassistant_precmd() {
  umask ${homeassistant_rc_umask}
  if [ ! -x ${HA_CMD:="${homeassistant_venv}/bin/hass"} ]; then
    err 1 "${HA_CMD} is not found or is not executable"
  elif [ "${_user:="`stat -f '%Su' ${HA_CMD}`"}" != ${homeassistant_user} ]; then
    if checkyesno homeassistant_rc_chown; then
      info "homeassistant_rc_chown is enabled but this function is incomplete"
      warn "\"${HA_CMD}\" is currently owned by \"${_user}\""
      warn "option 1: set the service back to the correct homeassistant_user: sysrc homeassistant_user=${_user}"
      warn "option 2: change the permissions on the virtaulenv for a different homeassistant_user:  chown -R ${homeassistant_user}:${homeassistant_group} ${homeassistant_venv}"
      err 1 "\"${homeassistant_user}\" can not stop a process owned by \"${_user_}\""
    else
      warn "${HA_CMD} is currently owned by ${_user}"
      warn "option 1: set the service back to the correct homeassistant_user: sysrc homeassistant_user=${_user}"
      warn "option 2: change the permissions on the virtaulenv for a different homeassistant_user:  chown -R ${homeassistant_user}:${homeassistant_group} ${homeassistant_venv}"
      err 1 "\"${homeassistant_user}\" can not stop a process owned by \"${_user_}\""
    fi
  fi
}

colors
run_rc_command "$1"
